@import '_vars.scss';

@function em($pixels, $context: $browser-context) {
  @return #{$pixels/$context}em
}

@function calc-percent($target, $container) {
  @return ($target / $container) * 100%;
}



@mixin font-smoothing { 
	-webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

@mixin user-select($user-select-value) {
	-webkit-touch-callout: $user-select-value;
	-webkit-user-select: $user-select-value;
	-moz-user-select: $user-select-value;
	-ms-user-select: $user-select-value;
	user-select: $user-select-value;
}


@mixin linear-grad($from_color, $to_color) {
	background: $to_color;
	background: -moz-linear-gradient(top, $from_color 0%, $to_color);
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$from_color), color-stop(100%,$to_color));
	background: -webkit-linear-gradient(top, $from_color 0%,$to_color 100%);
	background: -o-linear-gradient(top, $from_color 0%,$to_color 100%);
	background: -ms-linear-gradient(top, $from_color 0%,$to_color 100%);
	background: linear-gradient(to bottom, $from_color 0%,$to_color 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$from_color', endColorstr='$to_color',GradientType=0 );
}

@mixin linear-horiz-grad ($from_color, $to_color) {
    background: $to_color;
	background: -moz-linear-gradient(left, $from_color 0%, $to_color);
	background: -webkit-gradient(linear, left top, right top, color-stop(0%, $from_color), color-stop(100%, $to_color));
	background: -webkit-linear-gradient(left, $from_color 0%, $to_color 100%);
	background: -o-linear-gradient(left, $from_color 0%, $to_color 100%);
	background: -ms-linear-gradient(left, $from_color 0%, $to_color 100%);
	background: linear-gradient(to right, $from_color 0%, $to_color 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$from_color', endColorstr='$to_color',GradientType=1 );
}

@mixin background-image-grad($from_color, $to_color) {
	background-image: $to_color;
	background-image: -moz-linear-gradient(top, $from_color 0%, $to_color);
	background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$from_color), color-stop(100%,$to_color));
	background-image: -webkit-linear-gradient(top, $from_color 0%,$to_color 100%);
	background-image: -o-linear-gradient(top, $from_color 0%,$to_color 100%);
	background-image: -ms-linear-gradient(top, $from_color 0%,$to_color 100%);
	background-image: linear-gradient(to bottom, $from_color 0%,$to_color 100%);
}

@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	border-radius: $radius;
}

@mixin box-shadow($b_shad_x, $b_shad_y, $b_shad_b, $b_shad_l, $b_shad_c) {
	-webkit-box-shadow: $b_shad_x $b_shad_y $b_shad_b $b_shad_l $b_shad_c;
	-moz-box-shadow: $b_shad_x $b_shad_y $b_shad_b $b_shad_l $b_shad_c;
    box-shadow: $b_shad_x $b_shad_y $b_shad_b $b_shad_l $b_shad_c;
}


@mixin text-shadow($t_shad_x, $t_shad_y, $t_shad_b, $t_shad_c) {
	-webkit-text-shadow: $t_shad_x $t_shad_y $t_shad_b $t_shad_c;
	-moz-text-shadow: $t_shad_x $t_shad_y $t_shad_b $t_shad_c;
	-o-text-shadow: $t_shad_x $t_shad_y $t_shad_b $t_shad_c;
    text-shadow: $t_shad_x $t_shad_y $t_shad_b $t_shad_c;
}

@mixin box-sizing($box-model) {
	-webkit-box-sizing: $box-model;
	-moz-box-sizing: $box-model;
	box-sizing: $box-model;
}

@mixin backface-visibility($bf_vis) {
    -webkit-backface-visibility: $bf_vis;
    -moz-backface-visibility: $bf_vis;
	backface-visibility: $bf_vis;
}

@mixin appearance($value) {
    -webkit-appearance: $value;
    -moz-appearance: $value;
	appearance: $value;
}

@mixin vertical-align($value) {
    @if $value == "" {
        $value: 50%;
    } @else {
        $value: $value;
    }

  //position: relative;
  top: $value;
  -webkit-transform: translateY(-#{$value});
  -moz-transform: translateY(-#{$value});
  -o-transform: translateY(-#{$value});
  -ms-transform: translateY(-#{$value});
  transform: translateY(-#{$value});
}

@mixin trans-all ($trans_duration) {
	-o-transition: all $trans_duration ease-in-out;
	-moz-transition: all $trans_duration ease-in-out;
	-webkit-transition: all $trans_duration ease-in-out;
	transition: all $trans_duration ease-in-out;
}

@mixin trans-it($trans...) {
    $max: length($trans);
    $trans-string: '';

    @for $i from 1 through $max {
        $trans-string: #{$trans-string + nth($trans, $i)};

        @if $i < $max {
            $trans-string: #{$trans-string + ", "};
        }
    }
    -webkit-transition: $trans-string;
    -moz-transition:    $trans-string;
    -o-transition:      $trans-string;
    -ms-transition:     $trans-string;
    transition:         $trans-string;
}

@mixin trans-with-prefix($string) {
	-webkit-transition: -webkit-#{$string};
	-moz-transition: -moz-#{$string};
	-ms-transition: -ms-#{$string};
	-o-transition: -o-#{$string};
	transition: #{$string};
}

@mixin transform-origin($x, $y, $z) {
    -webkit-transform-origin: $x, $y, $z;
    -moz-transform-origin: $x, $y, $z;
    -o-transform-origin: $x, $y, $z;
    -ms-transform-origin: $x, $y, $z;
    transform-origin: $x, $y, $z;
}

@mixin rotate($rotate_deg) {
	-webkit-transform: rotate(#{$rotate_deg}deg);
	-moz-transform: rotate(#{$rotate_deg}deg);
	-ms-transform: rotate(#{$rotate_deg}deg);
	-o-transform: rotate(#{$rotate_deg}deg);
	transform: rotate(#{$rotate_deg}deg);
	filter:  progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($rotate_deg)}, M12=-#{sin($rotate_deg)}, M21=#{sin($rotate_deg)}, M22=#{cos($rotate_deg)});
	-ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($rotate_deg)}, M12=-#{sin($rotate_deg)}, M21=#{sin($rotate_deg)}, M22=#{cos($rotate_deg)})";
}

@mixin rotate3d($rot_x, $rot_y, $rot_z, $rot_angle) {
	-webkit-transform: rotate3d(#{$rot_x}, #{$rot_y}, #{$rot_z}, #{$rot_angle}deg);
	-moz-transform: rotate3d(#{$rot_x}, #{$rot_y}, #{$rot_z}, #{$rot_angle}deg);
	-ms-transform: rotate3d(#{$rot_x}, #{$rot_y}, #{$rot_z}, #{$rot_angle}deg);
	-o-transform: rotate3d(#{$rot_x}, #{$rot_y}, #{$rot_z}, #{$rot_angle}deg);
	transform: rotate3d(#{$rot_x}, #{$rot_y}, #{$rot_z}, #{$rot_angle}deg);
}

@mixin translate3d($rot_x, $rot_y, $rot_z) {
	-webkit-transform: translate3d(#{$rot_x}, #{$rot_y}, #{$rot_z});
	-moz-transform: translate3d(#{$rot_x}, #{$rot_y}, #{$rot_z});
	-ms-transform: translate3d(#{$rot_x}, #{$rot_y}, #{$rot_z});
	-o-transform: translate3d(#{$rot_x}, #{$rot_y}, #{$rot_z});
	transform: translate3d(#{$rot_x}, #{$rot_y}, #{$rot_z});
}

@mixin transform-custom($string) {
	-webkit-transform: $string;
	-moz-transform: $string;
	-ms-transform: $string;
	-o-transform: $string;
	transform: $string;
}

@mixin translateZ($trans_val) {
    -webkit-transform: translateZ($trans_val);
	-moz-transform:  translateZ($trans_val);
	-ms-transform:  translateZ($trans_val);
	-o-transform:  translateZ($trans_val);
	transform:  translateZ($trans_val);
}

@mixin perspective($angle) {
    -webkit-perspective: $angle;
	-moz-perspective:  $angle;
	-ms-perspective:  $angle;
	perspective:  $angle;
}

@mixin filter($filter) {
    -webkit-filter: $filter;
	-moz-filter: $filter;
	-ms-filter: $filter;
	//-o-filter: $filter;
	filter: $filter;
}

@mixin placeholder {
    &::-webkit-input-placeholder {@content;}
    &:-moz-placeholder {@content;}
    &::-moz-placeholder {@content;}
    &:-ms-input-placeholder {@content;}
}

@mixin clear-fix {
	display: block;
	content: '';
	clear: both; 
}

@mixin animation($animate...) {
    $max: length($animate);
    $animations: '';

    @for $i from 1 through $max {
        $animations: #{$animations + nth($animate, $i)};

        @if $i < $max {
            $animations: #{$animations + ", "};
        }
    }
    -webkit-animation: $animations;
    -moz-animation:    $animations;
    -o-animation:      $animations;
    -ms-animation:     $animations;
    animation:         $animations;
}

@mixin keyframes($animationName) {
	@-webkit-keyframes #{$animationName} {
		$browser: '-webkit-'; @content;
	}
	@-moz-keyframes #{$animationName} {
		$browser: '-moz-'; @content;
	}
	@-o-keyframes #{$animationName} {
		$browser: '-o-'; @content;
	}
    @-ms-keyframes #{$animationName} {
		$browser: '-ms-'; @content;
	}
	@keyframes #{$animationName} {
		$browser: ''; @content;
	}
} $browser: null;

@mixin animation-name($animation-name) {
    -webkit-animation-name: $animation-name;
    -ms-animation-name: $animation-name;
    -moz-animation-name: $animation-name;
    -o-animation-name: $animation-name;
    animation-name: $animation-name;
}

@mixin animation-direction($direction) {
    -webkit-animation-direction: $direction;
    -ms-animation-direction: $direction;
    -o-animation-direction: $direction;
    -moz-animation-direction: $direction;
    animation-direction: $direction;
}

@mixin animation-duration($duration) {
    -webkit-animation-duration: $duration;
    -ms-animation-duration: $duration;
    -o-animation-duration: $duration;
    -moz-animation-duration: $duration;
    animation-duration: $duration;
}

@mixin transition-timing-function($timing) {
    -webkit-transition-timing-function: $timing;
    -ms-transition-timing-function: $timing;
    -o-transition-timing-function: $timing;
    -moz-transition-timing-function: $timing;
    transition-timing-function: $timing;
}

@mixin animation-fill-mode($fill-mode) {
    -webkit-animation-fill-mode: $fill-mode;
    -ms-animation-fill-mode: $fill-mode;
    -o-animation-fill-mode: $fill-mode;
    -moz-animation-fill-mode: $fill-mode;
    animation-fill-mode: $fill-mode;
}

@mixin animation-delay($time) {
    -webkit-animation-delay: $time;
    -ms-animation-delay: $time;
    -o-animation-delay: $time;
    -moz-animation-delay: $time;
    animation-delay: $time;
}

@mixin transition-delay($time) {
    -webkit-transition-delay: $time;
    -ms-transition-delay: $time;
    -o-transition-delay: $time;
    -moz-transition-delay: $time;
    transition-delay: $time;
}

@mixin font-face($font-family, $font-name, $weight, $style) {
    @font-face {
        font-family: '#{$font-family}';
        src: url(font-path('#{$font-name}.eot'));
        src: url(font-path('#{$font-name}.eot?#iefix')) format('embedded-opentype'),
            url(font-path('#{$font-name}.woff')) format('woff'),
            url(font-path('#{$font-name}.woff2')) format('woff2');
        font-weight: $weight;
        font-style: $style;
    }
}

@function font-path($font) {
  @return ("../fonts/" + $font);
}